# Improvement: use ruby file filter to reduce code
input {
  # TODO db still read all -> change to read starting from last fetch
  jdbc { 
    jdbc_connection_string => "jdbc:mysql://mysql:3306/spike_logstash"
    jdbc_user              => "root"
    jdbc_password          => "@E12345678"
    jdbc_driver_library    => "/usr/share/logstash/mysql-connector-java-5.1.44-bin.jar"
    jdbc_driver_class      => "com.mysql.jdbc.Driver"
    type                   => "search_result_in_view"
    statement              => "SELECT * FROM search_result_in_view"
    schedule               => "* * * * *"
  }
  jdbc { 
    jdbc_connection_string => "jdbc:mysql://mysql:3306/spike_logstash"
    jdbc_user              => "root"
    jdbc_password          => "@E12345678"
    jdbc_driver_library    => "/usr/share/logstash/mysql-connector-java-5.1.44-bin.jar"
    jdbc_driver_class      => "com.mysql.jdbc.Driver"
    type                   => "search_result_card_shared"
    statement              => "SELECT * FROM search_result_card_shared"
    schedule               => "* * * * *"
  }
}

filter {
  if [type] == "search_result_in_view" {
    aggregate {
      task_id                      => "%{logical_search_id}"
      code                         => "
        map['logical_search_id'] = event.get('logical_search_id')
        map['search_result_in_view_count'] ||= 0; map['search_result_in_view_count'] += 1
        map['search_result_in_view_minrank'] ||= 0
        if (map['search_result_in_view_minrank'] == 0) || (map['search_result_in_view_minrank'] > event.get('rank'))
          map['search_result_in_view_minrank'] = event.get('rank')
        end
        map['search_result_in_view_rank_arr'] ||= []; map['search_result_in_view_rank_arr'].push(event.get('rank'))
      "
      push_map_as_event_on_timeout => true
      timeout                      => 3600 # 1 hour timeout, user activity will be considered finished one hour after the first event, even if events keep coming
      inactivity_timeout           => 1 # 1 second timeout, user activity will be considered finished if no new events arrive 1 second after the last event
      timeout_code => "
        len = event.get('search_result_in_view_count')
        arr = event.get('search_result_in_view_rank_arr')
        event.remove('search_result_in_view_rank_arr')
        
        event.set('search_result_in_view_rank_meanrank', arr.inject(0){|sum,x| sum + x } / len.to_f)
        
        sorted = arr.sort
        if len.odd?
          event.set('search_result_in_view_rank_medianrank', arr[(len - 1) / 2])
        else len.even?
          event.set('search_result_in_view_rank_medianrank', (arr[len/2] + arr[len/2 - 1])/2.to_f)
        end
      "
    }
  }
  
  ruby {
    code => '
      puts "-------------"
      if event.get("type") != nil
        puts "type: " + event.get("type").to_s
      end
      if event.get("logical_search_id") != nil
        puts "logical_search_id: " + event.get("logical_search_id").to_s
      end
      if event.get("search_result_in_view_count") != nil
        puts "search_result_in_view_count: " + event.get("search_result_in_view_count").to_s
      end
      if event.get("search_result_in_view_minrank") != nil
        puts "search_result_in_view_minrank: " + event.get("search_result_in_view_minrank").to_s
      end
      if event.get("search_result_in_view_rank_meanrank") != nil
        puts "search_result_in_view_rank_meanrank: " + event.get("search_result_in_view_rank_meanrank").to_s
      end
      if event.get("search_result_in_view_rank_medianrank") != nil
        puts "search_result_in_view_rank_medianrank: " + event.get("search_result_in_view_rank_medianrank").to_s
      end
    '
  }
}

